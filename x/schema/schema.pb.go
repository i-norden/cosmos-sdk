// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/schema/schema.proto

package schema

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeyDescriptor struct {
	Name           string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Store          string                `protobuf:"bytes,4,opt,name=store,proto3" json:"store,omitempty"`
	Prefix         []byte                `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValueProtoType *types.Any            `protobuf:"bytes,6,opt,name=value_proto_type,json=valueProtoType,proto3" json:"value_proto_type,omitempty"`
	ValueGoType    *types.Any            `protobuf:"bytes,7,opt,name=value_go_type,json=valueGoType,proto3" json:"value_go_type,omitempty"`
	Parts          []*KeyDescriptor_Part `protobuf:"bytes,8,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (m *KeyDescriptor) Reset()         { *m = KeyDescriptor{} }
func (m *KeyDescriptor) String() string { return proto.CompactTextString(m) }
func (*KeyDescriptor) ProtoMessage()    {}
func (*KeyDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd278d0f681a9338, []int{0}
}
func (m *KeyDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyDescriptor.Merge(m, src)
}
func (m *KeyDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *KeyDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_KeyDescriptor proto.InternalMessageInfo

func (m *KeyDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KeyDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *KeyDescriptor) GetStore() string {
	if m != nil {
		return m.Store
	}
	return ""
}

func (m *KeyDescriptor) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *KeyDescriptor) GetValueProtoType() *types.Any {
	if m != nil {
		return m.ValueProtoType
	}
	return nil
}

func (m *KeyDescriptor) GetValueGoType() *types.Any {
	if m != nil {
		return m.ValueGoType
	}
	return nil
}

func (m *KeyDescriptor) GetParts() []*KeyDescriptor_Part {
	if m != nil {
		return m.Parts
	}
	return nil
}

type KeyDescriptor_Part struct {
	// Types that are valid to be assigned to Sum:
	//	*KeyDescriptor_Part_Bytes_
	//	*KeyDescriptor_Part_String_
	//	*KeyDescriptor_Part_Separator_
	Sum isKeyDescriptor_Part_Sum `protobuf_oneof:"sum"`
}

func (m *KeyDescriptor_Part) Reset()         { *m = KeyDescriptor_Part{} }
func (m *KeyDescriptor_Part) String() string { return proto.CompactTextString(m) }
func (*KeyDescriptor_Part) ProtoMessage()    {}
func (*KeyDescriptor_Part) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd278d0f681a9338, []int{0, 0}
}
func (m *KeyDescriptor_Part) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyDescriptor_Part) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyDescriptor_Part.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyDescriptor_Part) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyDescriptor_Part.Merge(m, src)
}
func (m *KeyDescriptor_Part) XXX_Size() int {
	return m.Size()
}
func (m *KeyDescriptor_Part) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyDescriptor_Part.DiscardUnknown(m)
}

var xxx_messageInfo_KeyDescriptor_Part proto.InternalMessageInfo

type isKeyDescriptor_Part_Sum interface {
	isKeyDescriptor_Part_Sum()
	MarshalTo([]byte) (int, error)
	Size() int
}

type KeyDescriptor_Part_Bytes_ struct {
	Bytes *KeyDescriptor_Part_Bytes `protobuf:"bytes,1,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`
}
type KeyDescriptor_Part_String_ struct {
	String_ *KeyDescriptor_Part_String `protobuf:"bytes,2,opt,name=string,proto3,oneof" json:"string,omitempty"`
}
type KeyDescriptor_Part_Separator_ struct {
	Separator *KeyDescriptor_Part_Separator `protobuf:"bytes,3,opt,name=separator,proto3,oneof" json:"separator,omitempty"`
}

func (*KeyDescriptor_Part_Bytes_) isKeyDescriptor_Part_Sum()     {}
func (*KeyDescriptor_Part_String_) isKeyDescriptor_Part_Sum()    {}
func (*KeyDescriptor_Part_Separator_) isKeyDescriptor_Part_Sum() {}

func (m *KeyDescriptor_Part) GetSum() isKeyDescriptor_Part_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *KeyDescriptor_Part) GetBytes() *KeyDescriptor_Part_Bytes {
	if x, ok := m.GetSum().(*KeyDescriptor_Part_Bytes_); ok {
		return x.Bytes
	}
	return nil
}

func (m *KeyDescriptor_Part) GetString_() *KeyDescriptor_Part_String {
	if x, ok := m.GetSum().(*KeyDescriptor_Part_String_); ok {
		return x.String_
	}
	return nil
}

func (m *KeyDescriptor_Part) GetSeparator() *KeyDescriptor_Part_Separator {
	if x, ok := m.GetSum().(*KeyDescriptor_Part_Separator_); ok {
		return x.Separator
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*KeyDescriptor_Part) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*KeyDescriptor_Part_Bytes_)(nil),
		(*KeyDescriptor_Part_String_)(nil),
		(*KeyDescriptor_Part_Separator_)(nil),
	}
}

type KeyDescriptor_Part_Bytes struct {
	Name        string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	FixedWidth  uint32     `protobuf:"varint,3,opt,name=fixed_width,json=fixedWidth,proto3" json:"fixed_width,omitempty"`
	GoType      *types.Any `protobuf:"bytes,4,opt,name=go_type,json=goType,proto3" json:"go_type,omitempty"`
	Relations   []string   `protobuf:"bytes,5,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (m *KeyDescriptor_Part_Bytes) Reset()         { *m = KeyDescriptor_Part_Bytes{} }
func (m *KeyDescriptor_Part_Bytes) String() string { return proto.CompactTextString(m) }
func (*KeyDescriptor_Part_Bytes) ProtoMessage()    {}
func (*KeyDescriptor_Part_Bytes) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd278d0f681a9338, []int{0, 0, 0}
}
func (m *KeyDescriptor_Part_Bytes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyDescriptor_Part_Bytes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyDescriptor_Part_Bytes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyDescriptor_Part_Bytes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyDescriptor_Part_Bytes.Merge(m, src)
}
func (m *KeyDescriptor_Part_Bytes) XXX_Size() int {
	return m.Size()
}
func (m *KeyDescriptor_Part_Bytes) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyDescriptor_Part_Bytes.DiscardUnknown(m)
}

var xxx_messageInfo_KeyDescriptor_Part_Bytes proto.InternalMessageInfo

func (m *KeyDescriptor_Part_Bytes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KeyDescriptor_Part_Bytes) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *KeyDescriptor_Part_Bytes) GetFixedWidth() uint32 {
	if m != nil {
		return m.FixedWidth
	}
	return 0
}

func (m *KeyDescriptor_Part_Bytes) GetGoType() *types.Any {
	if m != nil {
		return m.GoType
	}
	return nil
}

func (m *KeyDescriptor_Part_Bytes) GetRelations() []string {
	if m != nil {
		return m.Relations
	}
	return nil
}

type KeyDescriptor_Part_String struct {
	Name        string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	GoType      *types.Any `protobuf:"bytes,3,opt,name=go_type,json=goType,proto3" json:"go_type,omitempty"`
	Relations   []string   `protobuf:"bytes,4,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (m *KeyDescriptor_Part_String) Reset()         { *m = KeyDescriptor_Part_String{} }
func (m *KeyDescriptor_Part_String) String() string { return proto.CompactTextString(m) }
func (*KeyDescriptor_Part_String) ProtoMessage()    {}
func (*KeyDescriptor_Part_String) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd278d0f681a9338, []int{0, 0, 1}
}
func (m *KeyDescriptor_Part_String) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyDescriptor_Part_String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyDescriptor_Part_String.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyDescriptor_Part_String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyDescriptor_Part_String.Merge(m, src)
}
func (m *KeyDescriptor_Part_String) XXX_Size() int {
	return m.Size()
}
func (m *KeyDescriptor_Part_String) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyDescriptor_Part_String.DiscardUnknown(m)
}

var xxx_messageInfo_KeyDescriptor_Part_String proto.InternalMessageInfo

func (m *KeyDescriptor_Part_String) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KeyDescriptor_Part_String) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *KeyDescriptor_Part_String) GetGoType() *types.Any {
	if m != nil {
		return m.GoType
	}
	return nil
}

func (m *KeyDescriptor_Part_String) GetRelations() []string {
	if m != nil {
		return m.Relations
	}
	return nil
}

type KeyDescriptor_Part_Separator struct {
	Separator string `protobuf:"bytes,1,opt,name=separator,proto3" json:"separator,omitempty"`
}

func (m *KeyDescriptor_Part_Separator) Reset()         { *m = KeyDescriptor_Part_Separator{} }
func (m *KeyDescriptor_Part_Separator) String() string { return proto.CompactTextString(m) }
func (*KeyDescriptor_Part_Separator) ProtoMessage()    {}
func (*KeyDescriptor_Part_Separator) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd278d0f681a9338, []int{0, 0, 2}
}
func (m *KeyDescriptor_Part_Separator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyDescriptor_Part_Separator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyDescriptor_Part_Separator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyDescriptor_Part_Separator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyDescriptor_Part_Separator.Merge(m, src)
}
func (m *KeyDescriptor_Part_Separator) XXX_Size() int {
	return m.Size()
}
func (m *KeyDescriptor_Part_Separator) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyDescriptor_Part_Separator.DiscardUnknown(m)
}

var xxx_messageInfo_KeyDescriptor_Part_Separator proto.InternalMessageInfo

func (m *KeyDescriptor_Part_Separator) GetSeparator() string {
	if m != nil {
		return m.Separator
	}
	return ""
}

func init() {
	proto.RegisterType((*KeyDescriptor)(nil), "cosmos.schema.v1beta1.KeyDescriptor")
	proto.RegisterType((*KeyDescriptor_Part)(nil), "cosmos.schema.v1beta1.KeyDescriptor.Part")
	proto.RegisterType((*KeyDescriptor_Part_Bytes)(nil), "cosmos.schema.v1beta1.KeyDescriptor.Part.Bytes")
	proto.RegisterType((*KeyDescriptor_Part_String)(nil), "cosmos.schema.v1beta1.KeyDescriptor.Part.String")
	proto.RegisterType((*KeyDescriptor_Part_Separator)(nil), "cosmos.schema.v1beta1.KeyDescriptor.Part.Separator")
}

func init() { proto.RegisterFile("cosmos/schema/schema.proto", fileDescriptor_bd278d0f681a9338) }

var fileDescriptor_bd278d0f681a9338 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x41, 0x8b, 0xd3, 0x4e,
	0x18, 0xc6, 0x93, 0x7f, 0x93, 0xf4, 0xdf, 0x37, 0x56, 0x64, 0x58, 0x25, 0x06, 0x89, 0xc1, 0x53,
	0x16, 0xd9, 0x89, 0xdb, 0xbd, 0x78, 0x52, 0x2c, 0xca, 0x16, 0xbd, 0x2c, 0x59, 0x41, 0xf0, 0x52,
	0x26, 0xed, 0x34, 0x0d, 0x36, 0x99, 0x30, 0x33, 0x5d, 0x9b, 0xcf, 0xe0, 0x41, 0xbf, 0x87, 0x5f,
	0xc4, 0xe3, 0x1e, 0x3d, 0x89, 0xb4, 0x5f, 0x44, 0x32, 0x93, 0xda, 0x55, 0x64, 0xd9, 0xdd, 0xd3,
	0x64, 0x9e, 0xf7, 0x7d, 0x1e, 0x7e, 0xbc, 0x6f, 0x18, 0xf0, 0x27, 0x4c, 0x14, 0x4c, 0xc4, 0x62,
	0x32, 0xa7, 0x05, 0x69, 0x0f, 0x5c, 0x71, 0x26, 0x19, 0xba, 0xab, 0x6b, 0xb8, 0x15, 0xcf, 0x0e,
	0x53, 0x2a, 0xc9, 0xa1, 0x7f, 0x3f, 0x63, 0x2c, 0x5b, 0xd0, 0x58, 0x35, 0xa5, 0xcb, 0x59, 0x4c,
	0xca, 0x5a, 0x3b, 0x1e, 0x7d, 0xee, 0x42, 0xff, 0x0d, 0xad, 0x5f, 0x52, 0x31, 0xe1, 0x79, 0x25,
	0x19, 0x47, 0x08, 0xac, 0x92, 0x14, 0xd4, 0x33, 0x43, 0x33, 0xea, 0x25, 0xea, 0x1b, 0x85, 0xe0,
	0x4e, 0xdb, 0x8e, 0x9c, 0x95, 0xde, 0x7f, 0xaa, 0x74, 0x51, 0x42, 0x7b, 0x60, 0x0b, 0xc9, 0x38,
	0xf5, 0x2c, 0x55, 0xd3, 0x17, 0x74, 0x0f, 0x9c, 0x8a, 0xd3, 0x59, 0xbe, 0xf2, 0xec, 0xd0, 0x8c,
	0x6e, 0x25, 0xed, 0x0d, 0x3d, 0x83, 0x3b, 0x67, 0x64, 0xb1, 0xa4, 0x63, 0x05, 0x31, 0x96, 0x75,
	0x45, 0x3d, 0x27, 0x34, 0x23, 0x77, 0xb0, 0x87, 0x35, 0x2b, 0xde, 0xb2, 0xe2, 0x17, 0x65, 0x9d,
	0xdc, 0x56, 0xdd, 0x27, 0x8d, 0xf4, 0xb6, 0xae, 0x28, 0x7a, 0x0a, 0x7d, 0xed, 0xcf, 0x5a, 0x73,
	0xf7, 0x12, 0xb3, 0xab, 0x5a, 0x8f, 0xb5, 0xf3, 0x39, 0xd8, 0x15, 0xe1, 0x52, 0x78, 0xff, 0x87,
	0x9d, 0xc8, 0x1d, 0xec, 0xe3, 0x7f, 0x4e, 0x0c, 0xff, 0x31, 0x12, 0x7c, 0x42, 0xb8, 0x4c, 0xb4,
	0xcf, 0xff, 0x61, 0x81, 0xd5, 0xdc, 0xd1, 0x31, 0xd8, 0x69, 0x2d, 0xa9, 0x50, 0x83, 0x72, 0x07,
	0xf1, 0x95, 0x93, 0xf0, 0xb0, 0xb1, 0x8d, 0x8c, 0x44, 0xfb, 0xd1, 0x6b, 0x70, 0x84, 0xe4, 0x79,
	0x99, 0xa9, 0xb9, 0xba, 0x83, 0x27, 0x57, 0x4f, 0x3a, 0x55, 0xbe, 0x91, 0x91, 0xb4, 0x09, 0xe8,
	0x14, 0x7a, 0x82, 0x56, 0x84, 0x13, 0xc9, 0xb8, 0xd7, 0x51, 0x71, 0x47, 0xd7, 0x88, 0xdb, 0x5a,
	0x47, 0x46, 0xb2, 0xcb, 0xf1, 0xbf, 0x9a, 0x60, 0x2b, 0xe6, 0x1b, 0xfe, 0x1b, 0x0f, 0xc1, 0x9d,
	0xe5, 0x2b, 0x3a, 0x1d, 0x7f, 0xcc, 0xa7, 0x72, 0xae, 0xb0, 0xfa, 0x09, 0x28, 0xe9, 0x5d, 0xa3,
	0xa0, 0x03, 0xe8, 0x6e, 0x17, 0x69, 0x5d, 0xb2, 0x48, 0x27, 0xd3, 0x3b, 0x7c, 0x00, 0x3d, 0x4e,
	0x17, 0xa4, 0xc9, 0x16, 0x9e, 0x1d, 0x76, 0xa2, 0x5e, 0xb2, 0x13, 0xfc, 0x4f, 0x26, 0x38, 0x7a,
	0x2e, 0x37, 0xc4, 0xbd, 0x40, 0xd3, 0xb9, 0x2e, 0x8d, 0xf5, 0x37, 0xcd, 0x3e, 0xf4, 0x7e, 0x4f,
	0xb5, 0x69, 0xdd, 0x6d, 0x47, 0x43, 0xed, 0x84, 0xa1, 0x0d, 0x1d, 0xb1, 0x2c, 0x86, 0xaf, 0xbe,
	0xad, 0x03, 0xf3, 0x7c, 0x1d, 0x98, 0x3f, 0xd7, 0x81, 0xf9, 0x65, 0x13, 0x18, 0xe7, 0x9b, 0xc0,
	0xf8, 0xbe, 0x09, 0x8c, 0xf7, 0x8f, 0xb3, 0x5c, 0xce, 0x97, 0x29, 0x9e, 0xb0, 0x22, 0x6e, 0x1f,
	0x01, 0x7d, 0x1c, 0x88, 0xe9, 0x87, 0x78, 0xb5, 0x7d, 0x11, 0x1a, 0x72, 0x91, 0x3a, 0x0a, 0xf6,
	0xe8, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xa2, 0x4f, 0xf5, 0x2f, 0x04, 0x00, 0x00,
}

func (m *KeyDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parts) > 0 {
		for iNdEx := len(m.Parts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchema(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ValueGoType != nil {
		{
			size, err := m.ValueGoType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ValueProtoType != nil {
		{
			size, err := m.ValueProtoType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Store) > 0 {
		i -= len(m.Store)
		copy(dAtA[i:], m.Store)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Store)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyDescriptor_Part) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyDescriptor_Part) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyDescriptor_Part) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sum != nil {
		{
			size := m.Sum.Size()
			i -= size
			if _, err := m.Sum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *KeyDescriptor_Part_Bytes_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyDescriptor_Part_Bytes_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bytes != nil {
		{
			size, err := m.Bytes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *KeyDescriptor_Part_String_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyDescriptor_Part_String_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.String_ != nil {
		{
			size, err := m.String_.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *KeyDescriptor_Part_Separator_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyDescriptor_Part_Separator_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Separator != nil {
		{
			size, err := m.Separator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *KeyDescriptor_Part_Bytes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyDescriptor_Part_Bytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyDescriptor_Part_Bytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for iNdEx := len(m.Relations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Relations[iNdEx])
			copy(dAtA[i:], m.Relations[iNdEx])
			i = encodeVarintSchema(dAtA, i, uint64(len(m.Relations[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.GoType != nil {
		{
			size, err := m.GoType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FixedWidth != 0 {
		i = encodeVarintSchema(dAtA, i, uint64(m.FixedWidth))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyDescriptor_Part_String) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyDescriptor_Part_String) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyDescriptor_Part_String) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relations) > 0 {
		for iNdEx := len(m.Relations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Relations[iNdEx])
			copy(dAtA[i:], m.Relations[iNdEx])
			i = encodeVarintSchema(dAtA, i, uint64(len(m.Relations[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.GoType != nil {
		{
			size, err := m.GoType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchema(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyDescriptor_Part_Separator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyDescriptor_Part_Separator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyDescriptor_Part_Separator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Separator) > 0 {
		i -= len(m.Separator)
		copy(dAtA[i:], m.Separator)
		i = encodeVarintSchema(dAtA, i, uint64(len(m.Separator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchema(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchema(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	l = len(m.Store)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	if m.ValueProtoType != nil {
		l = m.ValueProtoType.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	if m.ValueGoType != nil {
		l = m.ValueGoType.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	if len(m.Parts) > 0 {
		for _, e := range m.Parts {
			l = e.Size()
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	return n
}

func (m *KeyDescriptor_Part) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sum != nil {
		n += m.Sum.Size()
	}
	return n
}

func (m *KeyDescriptor_Part_Bytes_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bytes != nil {
		l = m.Bytes.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}
func (m *KeyDescriptor_Part_String_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.String_ != nil {
		l = m.String_.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}
func (m *KeyDescriptor_Part_Separator_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Separator != nil {
		l = m.Separator.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}
func (m *KeyDescriptor_Part_Bytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	if m.FixedWidth != 0 {
		n += 1 + sovSchema(uint64(m.FixedWidth))
	}
	if m.GoType != nil {
		l = m.GoType.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	if len(m.Relations) > 0 {
		for _, s := range m.Relations {
			l = len(s)
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	return n
}

func (m *KeyDescriptor_Part_String) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	if m.GoType != nil {
		l = m.GoType.Size()
		n += 1 + l + sovSchema(uint64(l))
	}
	if len(m.Relations) > 0 {
		for _, s := range m.Relations {
			l = len(s)
			n += 1 + l + sovSchema(uint64(l))
		}
	}
	return n
}

func (m *KeyDescriptor_Part_Separator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Separator)
	if l > 0 {
		n += 1 + l + sovSchema(uint64(l))
	}
	return n
}

func sovSchema(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchema(x uint64) (n int) {
	return sovSchema(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Store = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = append(m.Prefix[:0], dAtA[iNdEx:postIndex]...)
			if m.Prefix == nil {
				m.Prefix = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueProtoType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValueProtoType == nil {
				m.ValueProtoType = &types.Any{}
			}
			if err := m.ValueProtoType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueGoType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValueGoType == nil {
				m.ValueGoType = &types.Any{}
			}
			if err := m.ValueGoType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parts = append(m.Parts, &KeyDescriptor_Part{})
			if err := m.Parts[len(m.Parts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyDescriptor_Part) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Part: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Part: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KeyDescriptor_Part_Bytes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &KeyDescriptor_Part_Bytes_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KeyDescriptor_Part_String{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &KeyDescriptor_Part_String_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Separator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &KeyDescriptor_Part_Separator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sum = &KeyDescriptor_Part_Separator_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyDescriptor_Part_Bytes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bytes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bytes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedWidth", wireType)
			}
			m.FixedWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FixedWidth |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GoType == nil {
				m.GoType = &types.Any{}
			}
			if err := m.GoType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyDescriptor_Part_String) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: String: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: String: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GoType == nil {
				m.GoType = &types.Any{}
			}
			if err := m.GoType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyDescriptor_Part_Separator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Separator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Separator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Separator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchema
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchema
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Separator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchema(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchema
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchema(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchema
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchema
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchema
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchema
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchema
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchema        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchema          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchema = fmt.Errorf("proto: unexpected end of group")
)
